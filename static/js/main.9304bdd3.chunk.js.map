{"version":3,"sources":["assets/images/logo/logo-dark.svg","assets/images/stainless_steel_products/bench-01.jpg","assets/images/stainless_steel_products/bench-02.jpg","components/NavBarHome.tsx","components/CarouselHome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavBarHome","bg","variant","sticky","Brand","href","src","logo_dark","className","Nav","Link","NavBar","Carousel","Item","bench01","alt","Caption","bench02","App","Jumbotron","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mRCyB1BC,MAjBjB,WACI,OACI,kBAAC,IAAD,CAAQC,GAAG,QAAQC,QAAQ,QAAQC,OAAO,OACtC,kBAAC,IAAOC,MAAR,CAAcC,KAAK,SACf,yBAAKC,IAAKC,IAAWC,UAAU,qBAGnC,kBAACC,EAAA,EAAD,CAAKD,UAAU,WACX,kBAACC,EAAA,EAAIC,KAAL,CAAUF,UAAU,qBAAqBH,KAAK,SAA9C,QACA,kBAACI,EAAA,EAAIC,KAAL,CAAUF,UAAU,qBAAqBH,KAAK,aAA9C,YACA,kBAACI,EAAA,EAAIC,KAAL,CAAUF,UAAU,qBAAqBH,KAAK,UAA9C,SACA,kBAACI,EAAA,EAAIC,KAAL,CAAUF,UAAU,qBAAqBH,KAAK,YAA9C,c,kDCmBCM,MA/BjB,WACI,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,KAAV,KACI,yBACIL,UAAU,qBACVF,IAAKQ,IACLC,IAAI,gBAER,kBAACH,EAAA,EAASI,QAAV,KACI,iDACA,2FAIR,kBAACJ,EAAA,EAASC,KAAV,KACI,yBACIL,UAAU,qBACVF,IAAKW,IACLF,IAAI,iBAGR,kBAACH,EAAA,EAASI,QAAV,KACI,kDACA,2FCCLE,MAvBf,WACE,OACE,yBAAKV,UAAU,OAEb,kBAAC,EAAD,MAEA,kBAACW,EAAA,EAAD,KACE,gDACA,6JAIA,2BACE,kBAACC,EAAA,EAAD,CAAQlB,QAAQ,WAAhB,gBAIJ,kBAAC,EAAD,QCdcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9304bdd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-dark.81b7bb03.svg\";","module.exports = __webpack_public_path__ + \"static/media/bench-01.e30c5ac1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bench-02.82df2e61.jpg\";","import React from 'react';\nimport NavBar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport './NavBarHome.css'\n\nimport logo_dark from '../assets/images/logo/logo-dark.svg';\nimport About from '../pages/About';\n\nfunction NavBarHome() {\n    return (\n        <NavBar bg=\"light\" variant=\"light\" sticky=\"top\">\n            <NavBar.Brand href=\"#home\">\n                <img src={logo_dark} className=\"NavBarHome-logo\"/>\n            </NavBar.Brand>\n            \n            <Nav className=\"mr-auto\">\n                <Nav.Link className=\"NavBarHome-navlink\" href=\"#home\">Home</Nav.Link>\n                <Nav.Link className=\"NavBarHome-navlink\" href=\"#products\">Products</Nav.Link>\n                <Nav.Link className=\"NavBarHome-navlink\" href=\"#about\">About</Nav.Link>\n                <Nav.Link className=\"NavBarHome-navlink\" href=\"#contact\">Contact</Nav.Link>\n            </Nav>\n        </NavBar>\n    );\n  }\n  \n  export default NavBarHome;","import React from 'react';\nimport Carousel from 'react-bootstrap/Carousel';\nimport './CarouselHome.css'\n\nimport bench01 from '../assets/images/stainless_steel_products/bench-01.jpg'\nimport bench02 from '../assets/images/stainless_steel_products/bench-02.jpg'\n\nfunction NavBar() {\n    return (\n        <Carousel>\n            <Carousel.Item>\n                <img\n                    className=\"CarouselHome-image\"\n                    src={bench01}\n                    alt=\"First slide\"\n                />\n                <Carousel.Caption>\n                    <h3>First slide label</h3>\n                    <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n                </Carousel.Caption>\n            </Carousel.Item>\n\n            <Carousel.Item>\n                <img\n                    className=\"CarouselHome-image\"\n                    src={bench02}\n                    alt=\"Second slide\"\n                />\n\n                <Carousel.Caption>\n                    <h3>Second slide label</h3>\n                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                </Carousel.Caption>\n            </Carousel.Item>\n        </Carousel>\n    );\n  }\n  \n  export default NavBar;","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport NavBarHome from './components/NavBarHome';\nimport CarouseHome from './components/CarouselHome';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <NavBarHome/>\n\n      <Jumbotron>\n        <h1>Suzhou ALDR LLC.</h1>\n        <p>\n          This is a simple hero unit, a simple jumbotron-style component for calling\n          extra attention to featured content or information.\n        </p>\n        <p>\n          <Button variant=\"primary\">Learn more</Button>\n        </p>\n      </Jumbotron>\n\n      <CarouseHome/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}